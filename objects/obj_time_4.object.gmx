<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Timer
if (instance_exists(obj_gate_if_else)) {
    time = 30.0;
    max_time = 30.0;
    display_time = time;
} else {
    time = 150.0;
    max_time = 150.0;
    display_time = time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Count
if (time &gt; 0) {

    time = time - delta_time/1000000;
    
} else {

    time = 0;
    audio_play_sound(snd_book,0,false);
    instance_destroy();
    
    room_restart();
    
    /*obj_check_bk.has_book = false;
    obj_check_bk.book = 0;
    obj_check_bk.num_book_op = 0;
    
    with (obj_book_green_var) {
        sprite = 0;
        sprite_index = spr_book_green_0;
    }
    
    with (obj_char) {
        instance_destroy();
        instance_create(480, 288, obj_char);
    }  
        
    if (instance_exists(obj_book_blue_int_4)) {
        with (obj_book_blue_int_4) {
        instance_destroy();
        }
    }
        
    if (instance_exists(obj_book_blue_float_4)) {
        with (obj_book_blue_float_4) {
        instance_destroy();
        }
    }
        
    if (instance_exists(obj_book_blue_string_4)) {
        with (obj_book_blue_string_4) {
        instance_destroy();
        }
    }
    
    if (instance_exists(obj_book_red_4)) {
        with (obj_book_red_4) {
            instance_destroy();
        }
    }  
    
    if (instance_exists(obj_book_green_if_else)) {
        with (obj_book_green_if_else) {
            sprite = 0;
            sprite_index = spr_book_green_0;
        }
    }
    
    if (instance_exists(obj_wall_lv4)) {  
        with (obj_wall_lv4) {
            instance_destroy();
        }
    }
    
    if (!instance_exists(obj_gate_int)) {
        instance_create(672, 480, obj_gate_int);   
    }
    if (!instance_exists(obj_gate_float)) {
        instance_create(896, 320, obj_gate_float);
    }
    if (!instance_exists(obj_gate_if_else)) {
        instance_create(64, 96, obj_gate_if_else);
    }
    if (!instance_exists(obj_book_green_if_else)) {
        instance_create(704, 192, obj_book_green_if_else);
    }*/
}

display_time = ceil(time);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Time
draw_set_font(font1);
draw_set_colour(c_white);
draw_text(30, 30, "Tempo Restante: " + string(display_time));

draw_set_colour(c_ltgray);
var bar_width;
bar_width = 200;
draw_rectangle(20, 20, 20 + (time/max_time)*bar_width, 20+10, false);
draw_set_colour(c_black);
draw_rectangle(20, 20, 20 + bar_width, 20 + 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
