<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gate</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variable (txts)
count = 0;  //contador das caixas de texto
bk_instance = false;    //verifica a instância dos livros
collided = false;   //verifica se já houve colisão com portão

txt1 = "Em lógica de programação, uma estrutura de REPETIÇÃO define
uma ação ou uma sequência de ações que devem ocorrer no nosso programa
ENQUANTO uma condição a ser testada for verdadeira, ou ATÉ que essa
condição seja verdadeira.
#Pressione ENTER &gt;&gt;&gt;";

txt2 = "Estruturas de REPETIÇÃO são úteis quando precisamos executar
um determinado trecho de código por um determinado número de vezes,
possibilitando assim economia de linhas de código e de processamento.
#Pressione ENTER &gt;&gt;&gt;";

txt3 = "Imagine que você precise fazer um programa simples que conte
até 1.000... Seria bem entediante e cansativo ficar digitando todos
os números de 1 em 1 até chegar em 1.000, certo? Para evitar isso
você poderia utilizar uma estrutura de REPETIÇÃO.
#Pressione ENTER &gt;&gt;&gt;";

txt4 = "Por exemplo, você poderia fazer algo assim:
#numero = 1;
ENQUANTO (número &lt;= 1.000) {
    ESCREVA (numero);   //Mostra os números na tela
    numero = numero + 1;   //Adiciona 1 à VARIÁVEL 'numero'
}
#Como pode ser visto no código acima, tudo o que estiver entre as
{ } será executado ENQUANTO a variável 'número' for menor ou igual à
1.000, sendo assim o programa 'escreveria' na tela todos os números
de 1 em 1 até 1.000.
#Pressione ENTER &gt;&gt;&gt;";

txt5 = "Assim como nas estruturas de DECISÃO, o que estiver dentro
dos ( ) é a condição a ser testada, e o que estiver dentro das { },
é o código a ser executado a partir do resultado desta condição.
É importante ressaltar que se uma condição de parada nunca for
alcançada em uma estrutura de REPETIÇÃO, o programa entrará naquilo
que chamamos de LOOP INFINITO, ou seja, o programa ficará executando
aquilo que estiver entre as { } infinitamente!
#Pressione ENTER &gt;&gt;&gt;";

txt6 = "Existem outros comandos para se aplicar uma estrutura de
REPETIÇÃO, mas neste nível vamos focar apenas no comando ENQUANTO.
#Pressione ENTER &gt;&gt;&gt;";

txt7 = "O livro VERDE que apareceu no labirinto representa o comando
ENQUANTO. Se ele estiver aberto, o portão também permanece aberto
e você pode passar adiante rumo ao próximo Nível, porém algo me diz que
você não poderá perder muito tempo para realizar esta tarefa...
#Pressione ENTER &gt;&gt;&gt;";

txt8 = "No nosso desafio, o comando ENQUANTO será utilizado para
estabelecer o TEMPO em que o livro permance aberto:

ENQUANTO (tempo &gt; 0) {
    livro_Verde_Aberto = VERDADEIRO;
}

Quando abrir o livro, seja rápido para alcançar a saída rumo ao
próximo Nível!
#Pressione ENTER ...";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm text
has_collided = false;   //seta alarme apenas

if(has_collided != true){
        if(collided = true) {
        switch(count) {
            case 1:
            scr_text(txt1, 1, 150, 100);
            count++;
            break;
        
            case 2:
            scr_text(txt2, 1, 150, 100);
            count++;
            break;
        
            case 3:
            scr_text(txt3, 1, 150, 100);
            count++;
            break;
            
            case 4:
            scr_text(txt4, 1, 150, 100);
            count++;
            break;
            
            case 5:
            scr_text(txt5, 1, 150, 100);
            count++;
            break;
            
            case 6:
            scr_text(txt6, 1, 150, 100);
            count++;
            break;
            
            case 7:
            scr_text(txt7, 1, 150, 100);
            count++;
            break;
            
            case 8:
            scr_text(txt8, 1, 150, 100);
            count++;
            break;
        }
    }
}
has_collided = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_char">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create book instance
if(bk_instance = false){

    bk_instance = true;

    instance_create(256, 480, obj_book_green);

    obj_book_green.visible = true;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn txt
count = 0;

if (count = 0) {
    scr_text("Chegamos ao portão do Nível 3. Como dito anteriormente,
neste nível você precisa realizar uma tarefa que envolve uma estrutura
simples de REPETIÇÃO.
#Pressione ENTER &gt;&gt;&gt;", 1, 250, 100);
    collided = true;
    count = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm text
if (alarm[0] = -1) {
    alarm = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
