<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gate</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variable (txts)
count = 0;  //contador das caixas de texto
num_book_op = 0; //conta quantos livros estão abertos
book_op = false;    //verifica se existe algum livro aberto
bk_instance = false;    //verifica a instância dos livros
collided = false;   //verifica se já houve colisão com portão

txt1 = "A chave para abrir este portão é uma sequência de DECISÕES!#
Você deve realizar uma tarefa correta sobre comandos de DECISÃO para
abrir o portão e avançar para o próximo Nível.
#Pressione ENTER &gt;&gt;&gt;";

txt2 = "Em lógica de programação, comandos de DECISÃO funcionam como
um controle do que deve acontecer no nosso programa caso uma
determinada expressão, ou condição, seja VERDADEIRA e o que deve 
acontecer caso essa mesma expressão ou condição seja FALSA.
#Pressione ENTER &gt;&gt;&gt;";

txt3 = "Para que o nosso programa tome uma DECISÃO, é necessário que 
exista uma condição a ser testada. Essa condição pode nos retornar
2 resultados diferentes, dependendo do fato dela ser VERDADEIRA ou
dela ser FALSA.
#Pressione ENTER &gt;&gt;&gt;";

txt4 = "SE for VERDADEIRA, faça tal coisa. SENÃO faça outra coisa.
#Pressione ENTER &gt;&gt;&gt;";

txt5 = "Por exemplo, vamos imaginar uma situação:#
O fim de semana finalmente chegou mas você está indeciso sobre o 
que fazer para aproveitar o seu tempo livre. Você está em dúvida entre
sair e passear no parque ao ar livre, ou ficar em casa jogando video-games
e assistindo séries...
#Pressione ENTER &gt;&gt;&gt;";

txt6 = "Então você decide tomar a sua DECISÃO baseada no clima.
SE o dia estiver ensolarado, você vai ao parque passear, SENÃO
estiver ensolarado, você decide ficar em casa curtindo os seus
jogos e séries.
#Pressione ENTER &gt;&gt;&gt;";

txt7 = "Em código, a lógica seria algo mais ou menos assim:#
SE (ensolarado = VERDADEIRO) {
    ir_ao_parque;
}
SENÃO {
    ficar_em_casa;
}#
É importante observar que tudo o que estiver entre as { }
seria executado pelo programa, dependendo da condição ser
VERDADEIRA OU FALSA. A condição sempre estará entre os ( ).
#Pressione ENTER &gt;&gt;&gt;";

txt8 = "Quando estamos programando, a idéia é bem semelhante.
Nós precisamos apenas nos atentar a um pequeno detalhe...
#Pressione ENTER &gt;&gt;&gt;";

txt9 = "Aos operadores, que testam se a nossa condição é
VERDADEIRA ou FALSA.
#Pressione ENTER &gt;&gt;&gt;";

txt10 = "Eles podem ser operadores relacionais:
==  Igual a
!=  Diferente
&gt;=  Maior ou igual
&gt;  Maior que
&lt;  Menor que
&lt;=  Menor ou igual#
Ou operadores lógicos:
||  OU lógico
&amp;&amp;  E lógico
!  Negação
#Pressione ENTER &gt;&gt;&gt;";

txt11 = "Ufa... Parece um pouco complicado não é? Mas não é
tão dificil quanto parece, aliás, este portão exige uma tarefa
bem simples para ser aberto.
#Pressione ENTER &gt;&gt;&gt;";

txt12 = "Está vendo os livros que apareceram no labirinto?
Eles podem ficar em 2 estados diferentes, ABERTO ou FECHADO.
Basta encostar neles que eles se abrem ou se fecham.
#Pressione ENTER &gt;&gt;&gt;";

txt13 = "Para abrir o portão, você precisa organizar os livros
de acordo com o código abaixo:#
SE (numero_de_Livros_Abertos  &gt;  numero_de_Livros_Fechados) {
portao_aberto = VERDADEIRO; (acontece se a condição acima for VERDADEIRA)
}#
SENÃO {
portão_aberto = FALSO; (acontece se a condição acima for FALSA)
}#
DICA: ( &gt; - maior que )#
Organize corretamente os livros, esta é a chave para o próximo Nível!
#Pressione ENTER...";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_gate_2</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm text
has_collided = false;   //seta alarme apenas

if(has_collided != true){
        if(collided = true) {
        switch(count) {
            case 1:
            scr_text(txt1, 1, 150, 100);
            count++;
            break;
        
            case 2:
            scr_text(txt2, 1, 150, 100);
            count++;
            break;
        
            case 3:
            scr_text(txt3, 1, 150, 100);
            count++;
            break;
            
            case 4:
            scr_text(txt4, 1, 150, 100);
            count++;
            break;
            
            case 5:
            scr_text(txt5, 1, 150, 100);
            count++;
            break;
            
            case 6:
            scr_text(txt6, 1, 150, 100);
            count++;
            break;
            
            case 7:
            scr_text(txt7, 1, 150, 100);
            count++;
            break;
            
            case 8:
            scr_text(txt8, 1, 150, 100);
            count++;
            break;
            
            case 9:
            scr_text(txt9, 1, 150, 100);
            count++;
            break;
            
            case 10:
            scr_text(txt10, 1, 150, 100);
            count++;
            break;
            
            case 11:
            scr_text(txt11, 1, 150, 100);
            count++;
            break;
            
            case 12:
            scr_text(txt12, 1, 150, 100);
            count++;
            break;
            
            case 13:
            scr_text(txt13, 1, 150, 100);
            count++;
            break;
        }
    }
}
has_collided = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_char">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create book instance
if(bk_instance = false){

    bk_instance = true;

    instance_create(96, 96, obj_book_red);
    instance_create(160, 224, obj_book_red);
    instance_create(608, 96, obj_book_red);
    instance_create(416, 480, obj_book_red);
    instance_create(512, 480, obj_book_red);

    obj_book_red.visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn txt / Check book

if (book_op = false) {
    count = 0;
    if (count = 0) {
        scr_text("Mais uma vez temos este portão 
bloqueando a passagem! Dessa vez você precisa realizar
uma outra tarefa para abrir o portão e liberar a passagem
para o próximo nível.
#Pressione ENTER &gt;&gt;&gt;", 1, 250, 100);
        collided = true;
        count = 1;
    }
} else if (num_book_op &gt;= 3) {
    show_message("Confirme para a abrir o portão.");
    audio_play_sound(snd_gate,0,false);
    instance_destroy(); //adicionar animação?
    with (obj_book_red) {
        instance_destroy();
    }
    scr_text("Parabéns! Você conseguiu resolver o desafio!
O que você acabou de fazer com os livros tem tudo a ver com
uma estrutura simples de DECISÃO em lógica de programação.
Se o número de livros abertos fosse maior do que o número
de livros fechados a condição para abrir o portão seria
VERDADEIRA! Que tal agora avançarmos ao próximo nível?
#Pressione ENTER...", 1, 250, 100);
} else {
    show_message("Confirme para a abrir o portão.");
    scr_text("Ops! Parece que esta não é solução correta.
Por favor, tente novamente.
#Pressione ENTER...", 1, 250, 100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm text
if (alarm[0] = -1) {
    alarm = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
